#!/usr/bin/env python3
"""
Test script for enhanced Delphi code processing
"""
import os
import sys
import json
import requests
import tempfile
import shutil
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

LIGHTRAG_API_URL = os.getenv("LIGHTRAG_API_URL", "http://localhost:8080")


def create_test_delphi_files():
    """Create test Delphi files including Shift-JIS encoded files"""
    temp_dir = tempfile.mkdtemp()
    
    # Create a simple PAS file (UTF-8)
    pas_content = """unit TestUnit;

interface

type
  TTestClass = class
  private
    FValue: Integer;
  public
    constructor Create;
    destructor Destroy; override;
    procedure SetValue(AValue: Integer);
    function GetValue: Integer;
  end;

implementation

constructor TTestClass.Create;
begin
  inherited;
  FValue := 0;
end;

destructor TTestClass.Destroy;
begin
  inherited;
end;

procedure TTestClass.SetValue(AValue: Integer);
begin
  FValue := AValue;
end;

function TTestClass.GetValue: Integer;
begin
  Result := FValue;
end;

end."""
    
    # Create a DFM file (UTF-8)
    dfm_content = """object Form1: TForm1
  Left = 0
  Top = 0
  Caption = 'Test Form'
  ClientHeight = 299
  ClientWidth = 635
  object Button1: TButton
    Left = 248
    Top = 136
    Width = 75
    Height = 25
    Caption = 'Click Me'
    TabOrder = 0
  end
end"""
    
    # Create a Shift-JIS encoded PAS file with Japanese comments
    sjis_pas_content = """unit JapaneseUnit;

interface

type
  // 日本語のコメント
  TJapaneseClass = class
  private
    FValue: Integer;
  public
    constructor Create;
    // 値を設定する
    procedure SetValue(AValue: Integer);
    // 値を取得する
    function GetValue: Integer;
  end;

implementation

constructor TJapaneseClass.Create;
begin
  inherited;
  FValue := 0;
end;

procedure TJapaneseClass.SetValue(AValue: Integer);
begin
  // 値をセット
  FValue := AValue;
end;

function TJapaneseClass.GetValue: Integer;
begin
  // 値を返す
  Result := FValue;
end;

end."""
    
    # Create a large PAS file to test chunking
    large_pas_content = """unit LargeUnit;

interface

uses
  System.SysUtils, System.Classes, System.Generics.Collections;

type
"""
    
    # Add many functions to make it large
    for i in range(100):
        large_pas_content += f"""
  TTestClass{i} = class
  private
    FValue{i}: Integer;
    FName{i}: string;
  public
    constructor Create;
    destructor Destroy; override;
    procedure SetValue{i}(AValue: Integer);
    function GetValue{i}: Integer;
    procedure SetName{i}(const AName: string);
    function GetName{i}: string;
    function Calculate{i}(A, B: Integer): Integer;
    procedure Process{i}(Data: TStringList);
  end;
"""
    
    large_pas_content += """

implementation

"""
    
    for i in range(100):
        large_pas_content += f"""
constructor TTestClass{i}.Create;
begin
  inherited;
  FValue{i} := 0;
  FName{i} := '';
end;

destructor TTestClass{i}.Destroy;
begin
  inherited;
end;

procedure TTestClass{i}.SetValue{i}(AValue: Integer);
begin
  FValue{i} := AValue;
end;

function TTestClass{i}.GetValue{i}: Integer;
begin
  Result := FValue{i};
end;

procedure TTestClass{i}.SetName{i}(const AName: string);
begin
  FName{i} := AName;
end;

function TTestClass{i}.GetName{i}: string;
begin
  Result := FName{i};
end;

function TTestClass{i}.Calculate{i}(A, B: Integer): Integer;
begin
  Result := A + B + FValue{i};
end;

procedure TTestClass{i}.Process{i}(Data: TStringList);
var
  I: Integer;
begin
  for I := 0 to Data.Count - 1 do
  begin
    Data[I] := Data[I] + ' processed by class {i}';
  end;
end;

"""
    
    large_pas_content += "end."
    
    # Create an auto-generated file
    auto_gen_content = """// This file is automatically generated. Do not edit.
unit GeneratedUnit;

interface

type
  TGeneratedClass = class
  public
    procedure AutoMethod;
  end;

implementation

procedure TGeneratedClass.AutoMethod;
begin
  // Auto-generated code
end;

end."""
    
    # Create subdirectory
    sub_dir = Path(temp_dir) / "subdir"
    sub_dir.mkdir()
    
    # Write files
    files = [
        (Path(temp_dir) / "TestUnit.pas", pas_content, 'utf-8'),
        (Path(temp_dir) / "TestForm.dfm", dfm_content, 'utf-8'),
        (Path(temp_dir) / "JapaneseUnit.pas", sjis_pas_content, 'shift_jis'),
        (Path(temp_dir) / "LargeUnit.pas", large_pas_content, 'utf-8'),
        (Path(temp_dir) / "GeneratedUnit.generated.pas", auto_gen_content, 'utf-8'),
        (sub_dir / "SubUnit.pas", pas_content, 'utf-8'),
    ]
    
    for file_path, content, encoding in files:
        with open(file_path, 'w', encoding=encoding) as f:
            f.write(content)
    
    return temp_dir


def test_enhanced_processing():
    """Test the enhanced Delphi code processing pipeline"""
    print("=== Starting Enhanced Delphi Code Processing Test ===")
    
    # Create test files
    test_dir = create_test_delphi_files()
    print(f"Created test files in: {test_dir}")
    
    try:
        # Test 1: Normal processing
        print("\n--- Test 1: Normal Processing ---")
        import subprocess
        result = subprocess.run(
            [sys.executable, "process_delphi_code_enhanced.py", test_dir],
            capture_output=True,
            text=True
        )
        
        print("Output:")
        print(result.stdout)
        if result.stderr:
            print("Errors:")
            print(result.stderr)
        
        # Test 2: Resume functionality
        print("\n--- Test 2: Testing Resume Functionality ---")
        result = subprocess.run(
            [sys.executable, "process_delphi_code_enhanced.py", test_dir],
            capture_output=True,
            text=True
        )
        
        print("Output (should skip already processed files):")
        if result.stdout:
            print(result.stdout)
        else:
            print("(No stdout output)")
        if result.stderr:
            print("Stderr:")
            print(result.stderr)
        
        # Test 3: Reset and reprocess
        print("\n--- Test 3: Testing Reset Functionality ---")
        result = subprocess.run(
            [sys.executable, "process_delphi_code_enhanced.py", test_dir, "--reset"],
            capture_output=True,
            text=True
        )
        
        print("Output (should reprocess all files):")
        if result.stdout:
            print(result.stdout)
        else:
            print("(No stdout output)")
        if result.stderr:
            print("Stderr:")
            print(result.stderr)
        
        # Test querying the data
        if result.returncode == 0:
            print("\n=== Testing Queries ===")
            test_queries()
        
    finally:
        # Clean up
        shutil.rmtree(test_dir)
        print(f"\nCleaned up test directory: {test_dir}")
        
        # Clean up progress file
        progress_file = ".lightrag_progress.json"
        if os.path.exists(progress_file):
            os.remove(progress_file)
            print(f"Removed progress file: {progress_file}")


def test_queries():
    """Test querying the processed data"""
    queries = [
        "What classes are defined in the code?",
        "Show me all functions that calculate something",
        "What is TJapaneseClass?",
        "How many test classes are there?",
        "Find methods that process data"
    ]
    
    for query in queries:
        print(f"\nQuery: {query}")
        try:
            response = requests.post(
                f"{LIGHTRAG_API_URL}/query",
                json={"query": query, "mode": "hybrid", "stream": False},
                headers={"Content-Type": "application/json"}
            )
            
            if response.status_code == 200:
                result = response.json()
                response_text = result.get('response', 'No response')
                print(f"Response: {response_text[:300]}...")
            else:
                print(f"Query failed: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"Error querying: {e}")


def check_services():
    """Check if required services are running"""
    print("=== Checking Services ===")
    
    # Check LightRAG
    try:
        response = requests.get(f"{LIGHTRAG_API_URL}/docs")
        if response.status_code == 200:
            print("✓ LightRAG is running")
        else:
            print("✗ LightRAG is not responding properly")
            return False
    except:
        print("✗ LightRAG is not running")
        return False
    
    # Check Qdrant
    try:
        response = requests.get("http://localhost:6333/collections")
        if response.status_code == 200:
            print("✓ Qdrant is running")
        else:
            print("✗ Qdrant is not responding properly")
            return False
    except:
        print("✗ Qdrant is not running")
        return False
    
    return True


def main():
    print("=== Enhanced Delphi Code Processing Test ===\n")
    
    # Check if services are running
    if not check_services():
        print("\nPlease ensure docker-compose is running:")
        print("  docker-compose up -d")
        return
    
    # Check if enhanced processor exists
    if not os.path.exists("process_delphi_code_enhanced.py"):
        print("Error: process_delphi_code_enhanced.py not found")
        return
    
    # Run the test
    test_enhanced_processing()


if __name__ == "__main__":
    main()